#!/bin/bash
# Wrapper around yt-dlp for downloading
# audio and video.

# TODO:
# - [ ] Option to download chapters with --split-chapters
# - [ ] Concurrency
# - [ ] Remove sponsor segments
# - [ ] Rate limiting
# - [ ] Error handling when 1080 not available
# - [ ] Verify format requested is available
# - [ ] Support configurable resolution
# - [ ] Output JSON
# - [ ] don't re-encode the video for performance
# - [ ] Create filename and store it instead of getting it again
# - [ ] trap ctrl-c and delete partial files if they were created

source ./utils

if ! verify_installed yt-dlp ffmpeg jq; then
	exit 1
fi

function usage() {
	cat <<-EOF
		yt-dlp wrapper

		usage: ytd [--directory|-d <output_dir>] [--audio|-a] [--video|-v] [--output|-o <filename>]
	EOF
}

args='--restrict-filenames --output "%(title)s.%(ext)s" --no-progress'

while [[ $# -gt 0 ]]; do
	case "$1" in
		"--output"|"-o")
			output=${1}
			;;
		--directory|-d)
			if [[ ! -d "${1}" ]]; then
				info "Creating output directory ${1}"
				mkdir -p "${1}"
			fi
			output_dir="${1}"
			;;
		# "--audio"|"-a")
		# 	# TODO: Not always available
		# 	args="${args} --format \"bestaudio[ext=m4a]\" --extract-audio"
		# 	output_dir=${HOME}/music
		# 	;;
		# "--video"|"-v")
		# 	# TODO: Not always available
		# 	args="${args} --format \"bestvideo[height=1080][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best\""
		# 	output_dir=${HOME}/video
		# 	;;
		# "--section"|"-s")
			# if [[ -z "$2" ]]; then
			# 	error "Please provide a timeframe to download"
			# 	exit 1
			# fi

			# # Fix args
			# if start=$(echo ${2%-*} | grep -E '[0-9]{2}:[0-9]{2}:[0-9]{2}'); then
			# 	:
			# elif echo ${2%-*} | grep -w "start" &>/dev/null; then
			# 	start="00:00:00"
			# else
			# 	error "Invalid format for start time"
			# 	exit 1
			# fi

			# ffmpeg_args="${ffmpeg_args} -s ${start}"

			# if end=$(echo ${2##*-} | grep -E '[0-9]{2}:[0-9]{2}:[0-9]{2}'); then
			# elif ! echo ${2##*-} | grep -w "end" &>/dev/null; then
			# 	error "Invalid format for end time"
			# 	exit 1
			# fi
			# ffmpeg_args="${ffmpeg_args} -to ${end}"

			# section=1
			# shift
			# :
			# ;;
		"--help"|"-h")
			usage
			exit 0
			;;
		"--batch-file"|"-b")
			# if [[ ! -f "$2" ]]; then
			# 	error "File does not exist"
			# 	exit 1
			# fi
			# args="${args} --batch-file $2"
			# shift
			;;
		*)
			if [[ -z ${1} ]]; then
				error "Missing URL"
				exit 1
			fi

			url="$(printf "$*" | jq -sRr '@uri')"
			if ! is_url "${url}"; then
				error "${url} is not valid http(s) url"
				exit 1
			fi

			if ! echo "${url}" | grep "youtube" >/dev/null; then
				error "Please provide a youtube URL"
				exit 1
			fi
			;;
	esac
	shift
done

info "Executing: yt-dlp ${args} ${url}"
yt-dlp ${args} ${url}

# if [[ ${section} ]]; then
# 	info "Cutting video to given timestamps"
# 	filename=$(yt-dlp --restrict-filenames --output "%(title)s.%(ext)s" --print filename ${url})

# 	info "Executing: ffmpeg ${ffmpeg_args} -i ${filename}"
# 	ffmpeg ${ffmpeg_args} -i ${filename}
# fi
