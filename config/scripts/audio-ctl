#!/bin/bash
#!/bin/bash
# Controls music player
#
# $1 - The operation to perform (next, previous, play-pause)
# $? - Whether the operation was successful

source ./utils

if ! verify_installed playerctl jq pactl notify-send; then
	exit 1
fi

function get_sink_name() {
	if [[ -z "$1" ]]; then
		exit 1
	fi
	pactl --format=json list sinks \
		| jq -r --arg choice "$*" '.[]
			| select(.description == $choice)
			| .name
		'
}

function get_all_sinks() {
	pactl --format=json list sinks \
		| current=${default_sink} jq -r '.[]
			| if .name == env.current then
				.state="* "
			else
				.state=""
			end
			| .state + .description
		'
}

function display_volume() {
	local muted="$(pactl get-sink-mute @DEFAULT_SINK@ | awk '{print $2}')"
	if [[ "$muted" = "yes" ]]; then
		echo "muted"
	else
		echo "$(pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | tr -d '[:space:]%')"
	fi
}

function change_sink() {
	local default_sink="$(pactl get-default-sink)"

	# TODO: Tofi
	if
		! choice=$(printf '%s\n' "$(get_all_sinks)" \
			| sort \
			| dmenu -i -c -l 20 -p 'Sink: ' "$@");
	then
		error "Could not parse sink choice"
		exit 1
	fi

	if [[ -n "${choice}" ]]; then
		if [[ "${choice}" = "* ${default_sink}" ]]; then
			exit 0
		fi
		pactl set-default-sink "$(get_sink_name ${choice})"
		notify-send "Sink is now: ${choice}"
	else
		exit 0
	fi
}

while [[ ${#} -gt 0 ]]; do
	case "$1" in
	inc)
		pactl set-sink-volume @DEFAULT_SINK@ +2%
		;;
	dec)
		pactl set-sink-volume @DEFAULT_SINK@ -2%
		;;
	toggle)
		pactl set-sink-mute @DEFAULT_SINK@ ${1}
		;;
	display)
		display_volume
		;;
	change-sinks)
		change_sink
		;;
	next|previous|play-pause)
		playerctl --player=mpd,spotify,firefox,%any "${1}"
		;;
	*)
		exit 1
		;;
	esac
	shift
done
